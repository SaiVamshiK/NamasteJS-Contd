Class Based Components:
Earlier react has started with class based components.
Always while specifying the routes inside createBrowserRouter function do not use '/', since it takes the path as localhost:8908/...
While nesting of various paths just use the name of the paths.
=========================================
We cannot create a class based component without a render() method.
The render() method returns some JSX.
Content inside the constructor is only executed once - during the initial render.
Content inside the render method is executed once during initial render and each time the state variables change.
Constructor Call->render Call : IMP Flow
=========================================
We can make the componentDidMount() as async,but not the callback function inside the useEffect() hook.
=========================================
Never compare lifecycle of class component with functional component.
=========================================
IMP:
We use custom hooks since we cannot make state variables inside normal function. We cannot use useEffect() inside a normal function.
=========================================
At the end the basic job of a bundler is to bundle the entire project code into a single JS file.
Bundling is good to only an extent.
Large scale production ready apps cannot be created with 1 bundle. So we need to use chucking/ code spliting/ Lazy loading. 
Suppose we go to makemytrip.com, we see multiple tabs for flight bookings, bus bookings, train bookings.
So when we are at the flight bookings page it makes sense to load just the components belonging to flights bookings. It does not make sense to load all the components of the entire website.
So when we are at the flights bookings page, we load that particular bundle.
When we are at the trains bookings page, we only load that particular bundle.
This is also called as ON DEMAND LOADING/DYNAMIC IMPORT.
This optimizes our app.
=========================================

