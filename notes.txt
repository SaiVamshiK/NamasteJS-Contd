When we refresh a page, 2 things happen :
1. Parsing of HTML.
2. Loading the script tags. This step has 2 parts : 
					a: fetching the script and 
					b: executing the script line by line.

Scenario 1:
<script src = "">
In this case the browser stops parsing the HTML once it sees the script tag. It fetches the script tag from external source and then executes it. After that it continues the parsing of the remaining HTML.

Scenario 2:
<script src = "" async>
Once the browser sees an async tag it asynchronously fetches the script tag along with the HTML parsing. Once the script is available, the browser stops the HTML parsing and executes the script tag. Once it is done the HTML parsing continues. 

Scenario 3:
<script src = "" defer>
Once the browser sees a defer tag it will asyncronously fetch the script tags from the source along with HTML parsing. Once the entire HTML parsing is done only then the script tags are executed.

When to use what :
Using async does not guarantee the order of execution of scripts, so if the script tags are dependent on each other we do not want to use async tags. Defer maintains the order of execution of scripts.
==============================================
If our browser does not understand any part of the code, to make it compatible it is converted into the code that is compatible with the browser to understand and execute.
THIS CONVERSION IS DONE BY BABEL. The converted older code is called POLYFILL.
Babel uses browserslist in order to know on which browsers our application HAS to run on.
Babel is just a JS library which just convertes our newer code into an older version of code that can be understood by browser.
JSX->React Element->HTML is done by babel.
==============================================
Implementing React.Fragment type of custom component:
import * as Obj from '/Header.js';
<Obj.Title/> is how we use it.
==============================================
Whenever a state variable in a component gets changes whole component is re rendered.
Never make an API call inside a component, since the API call gets executed each time the component is re rendered, i.e. whenever there is a change in state variables.
Page Loads => render default page => API call => render updated Page. : this is a better approach.
==============================================
data?.data?.cards[2] = use optional chaining to prevent null pointer exception
==============================================
First the entire body component is re rendered only after that the corresponding useEffect's callback functions are called.
==============================================
If we do not give any dependency array in 2nd parameter, then the callback function gets called AFTER each time the component renders.
==============================================
IMP Points:
Never create a component inside another component. Because inner component gets created each time after the outer component re renders.
Never use useState() inside if else or for loop. 
useState() is a hook to create LOCAL STATE VARIABLE inside functional component.
Never use useState() outside the components.
==============================================
CDN is a greater place to store and retrieve images. Because it is fast.
Use formik while building forms.
==============================================
React Router DOM: 
npm install react-router-dom
==============================================
Problem with anchor tag is that when we click the tag it refreshes the whole page. It is a bad thing. 
React is a SPA.
==============================================
Two types of routing:
1. Client side : Like react where we do not need to make a call to server to go to a particular page as all the components are already there. (No network call made, no reloading of page.)
2. Server side : This is where we make a server call (refresh of page happens) and we load the page.
Using anchor tag make the page to reload. In order to avoid reload of pages avoid the use of anchor tag.
IMP NOTE:
Go to the browser code, you will see the anchor tag instead of Link tag.
All the childrens go into the outlet.
==============================================
Inline CSS is hard for browser to process. Writing CSS in another file is beterr than this.
Material UI is a library. It has a lot of prebuilt components that is already styled.
Tailwind is an open source CSS framework.
Tailwind says write CSS on the go.
Tailwind comes with a lot of prebuilt class.
Tailwind provides reusability.
Tailwind uses lesser bundle file.
Has a flexible UI (customizable).
Tailwind CSS changes the way our tags are already looking. Default CSS is removed.
Everything in tailwind works with class names.

Configuring Tailwind CSS :
1. Use CDN links
2. Or Install the library (better way)

npm install -D tailwindcss postcss : to install tailwind.
npx tailwindcss init - creates the config file. (tell tailwind what files uses tailwind)
create .postcssrc file
configure index.css

postcss is used for compilation of the CSS.
.postcssrc : This file tells parcel that at the time of build, we need to build tailwind as well into our project.
==============================================
Installing Tailwind CSS IntelliSense extension
==============================================
Tailwind CSS compiles the CSS file with only the classes we have used in our project and ship it to production.
Try to use what tailwind offers by default, this is because the index.css file which tailwind creates while building the project would be smaller.

Pros of Tailwind:
Less code is shiped to production.
No duplicate CSS.
Bundle size is small.
Customizable.

Cons of Tailwind:
Lot of classes.
==============================================
State is the local variable that is used by the component.
Prop is the argument that is passed from one component to another component.

Props Drilling is not a good way to pass props from one component to another component.
It makes our components to have a lot of unused props.
==============================================
Building a collapsable accordian:
==============================================
Profiler tells what happened in the website.
==============================================
If we want to access a JS object across all components we need to maintain a storage for all components.
The storages are React Context or Redux.
Why use React Context to store global variable, why not just use normal JS variables?
Ans. This question is same as why use state variables. In order for React to keep track of what is happening we need to use it.

User Context is decoupled from all components.
Context is like useState for whole application.
==============================================
We can modify the UserContext using a Provider.
==============================================
Redux:
We use it to manage the data layer of the application.
Context is a central place where all the data is being stored.
Any component in our app can access and modify the context.
When app is huge we can use Redux.
Why Redux -> data management.
Problem with Redux -> complex to setup.
Redux toolkit is used to solve the problem of complexity.
We will use Redux toolkit.

Architecture of Redux Toolkit:
We are building cart feature for the application.
Menu page has food items with an add button.

Redux Store:
At the end of the day it is a huge object.
The object has several sections.
All the components are able to access the Redux store.
Store is not tied to any entity/component.
Web app and store is different.
In redux there is a SINGLE store.
We will create slices/logical separation of our store.
Our app can have a Cart slice, User slice, Authentication slice.
Slice is a portion of the Redux store.
OUR COMPONENTS CANNOT DIRECTLY MODIFY THE STORE.
WE WILL HAVE TO DISPATCH AN ACTION.
WHEN WE CLICK ON + BUTTON TO ADD AN ITEM TO THE CART PAGE, WE WILL HAVE TO DISPATCH AN ACTION TO THE CART SLICE. THE DISPATCH ACTION IS "addItem".
This action will call a JS function, that function will modify the cart. 
THIS FUNCTION IS CALLED AS REDUCER.
Why can't we directly modify the store -> Because we do not want random components to modify the store.

IMP : We click the + button -> It dispatches an action -> It calls the Reducer function that modifies the CART SLICE of the store.

Reading data from the store:
If we want to read a cart slice then we call the Selector that provides information about the CART SLICE.
Selector selects the portion of the store.
Selector at the end of the day is a hook.


'+' Clicked -> Dispatch an Action -> Reducer function called to update the slice->
Slice of store updated -> Selector function called to read the slice -> Cart count updated.

IMP Point : Cart Component has SUBSCRIBED (uses Selector for subscribing) to the CART SLICE which means whenever the CART SLICE is updated the CART component gets updated.

===================================================
npm i @reduxjs/toolkit = to install redux toolkit. (core of react)
npm i react-redux = bridge between redux and react.
















 




